// Code generated by github.com/incident-io/partial/gen, DO NOT EDIT.

package test

import (
	"time"

	"github.com/incident-io/partial"
	"github.com/onsi/gomega"
	"github.com/onsi/gomega/gstruct"
	"github.com/onsi/gomega/types"
	"gopkg.in/guregu/null.v3"
)

// IncidentBuilder initialises a Incident struct with fields from the given setters. Setters
// are applied first to last, with subsequent sets taking precedence.
var IncidentBuilder = IncidentBuilderFunc(func(opts ...func(*Incident) []string) partial.Partial[Incident] {
	apply := func(base Incident) partial.Partial[Incident] {
		model := partial.Partial[Incident]{
			Subject:    base,
			FieldNames: []string{},
		}
		for _, opt := range opts {
			model.FieldNames = append(model.FieldNames, opt(&model.Subject)...)
		}

		return model
	}

	model := apply(Incident{})
	model.SetApply(func(base Incident) *Incident {
		patched := apply(base).Subject
		return &patched
	})

	return model
})

type IncidentBuilderFunc func(opts ...func(*Incident) []string) partial.Partial[Incident]

func (b IncidentBuilderFunc) ID(value string) func(*Incident) []string {
	return func(subject *Incident) []string {
		subject.ID = value

		return []string{
			"ID",
		}
	}
}

func (b IncidentBuilderFunc) OrganisationID(value string) func(*Incident) []string {
	return func(subject *Incident) []string {
		subject.OrganisationID = value

		return []string{
			"OrganisationID",
		}
	}
}

func (b IncidentBuilderFunc) Organisation(value *Organisation) func(*Incident) []string {
	return func(subject *Incident) []string {
		subject.Organisation = value

		return []string{
			"Organisation",
		}
	}
}

func (b IncidentBuilderFunc) CreatedAt(value time.Time) func(*Incident) []string {
	return func(subject *Incident) []string {
		subject.CreatedAt = value

		return []string{
			"CreatedAt",
		}
	}
}

// IncidentMatcher creates a Gomega matcher for Incident against the given
// fields. Matchers are applied first to last, with subsequent matchers taking precedence.
var IncidentMatcher = IncidentMatcherFunc(func(opts ...func(*Incident, *gstruct.Fields)) types.GomegaMatcher {
	fields := gstruct.Fields{}
	for _, opt := range opts {
		opt(nil, &fields)
	}

	return gstruct.PointTo(
		gstruct.MatchFields(gstruct.IgnoreExtras, fields),
	)
})

// Matcher is added to the base type, permitting other generic functions to build matchers
// from each of the matcher-setter functions.
func (b Incident) Matcher(opts ...func(*Incident, *gstruct.Fields)) types.GomegaMatcher {
	return IncidentMatcher(opts...)
}

type IncidentMatcherFunc func(opts ...func(*Incident, *gstruct.Fields)) types.GomegaMatcher

type IncidentMatcherMatchers struct{}

// Match returns an interface with the same methods as the base matcher, but accepting
// GomegaMatcher parameters instead of the exact equality matches.
func (b IncidentMatcherFunc) Match() IncidentMatcherMatchers {
	return IncidentMatcherMatchers{}
}

func (b IncidentMatcherFunc) ID(value string) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["ID"] = gomega.Equal(value)
	}
}

func (b IncidentMatcherFunc) MatchID(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["ID"] = value
	}
}

func (b IncidentMatcherMatchers) ID(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["ID"] = value
	}
}

func (b IncidentMatcherFunc) OrganisationID(value string) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["OrganisationID"] = gomega.Equal(value)
	}
}

func (b IncidentMatcherFunc) MatchOrganisationID(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["OrganisationID"] = value
	}
}

func (b IncidentMatcherMatchers) OrganisationID(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["OrganisationID"] = value
	}
}

func (b IncidentMatcherFunc) Organisation(value *Organisation) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["Organisation"] = gomega.Equal(value)
	}
}

func (b IncidentMatcherFunc) MatchOrganisation(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["Organisation"] = value
	}
}

func (b IncidentMatcherMatchers) Organisation(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["Organisation"] = value
	}
}

func (b IncidentMatcherFunc) CreatedAt(value time.Time) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["CreatedAt"] = gomega.Equal(value)
	}
}

func (b IncidentMatcherFunc) MatchCreatedAt(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["CreatedAt"] = value
	}
}

func (b IncidentMatcherMatchers) CreatedAt(value types.GomegaMatcher) func(*Incident, *gstruct.Fields) {
	return func(_ *Incident, fields *gstruct.Fields) {
		(*fields)["CreatedAt"] = value
	}
}

// OrganisationBuilder initialises a Organisation struct with fields from the given setters. Setters
// are applied first to last, with subsequent sets taking precedence.
var OrganisationBuilder = OrganisationBuilderFunc(func(opts ...func(*Organisation) []string) partial.Partial[Organisation] {
	apply := func(base Organisation) partial.Partial[Organisation] {
		model := partial.Partial[Organisation]{
			Subject:    base,
			FieldNames: []string{},
		}
		for _, opt := range opts {
			model.FieldNames = append(model.FieldNames, opt(&model.Subject)...)
		}

		return model
	}

	model := apply(Organisation{})
	model.SetApply(func(base Organisation) *Organisation {
		patched := apply(base).Subject
		return &patched
	})

	return model
})

type OrganisationBuilderFunc func(opts ...func(*Organisation) []string) partial.Partial[Organisation]

func (b OrganisationBuilderFunc) ID(value string) func(*Organisation) []string {
	return func(subject *Organisation) []string {
		subject.ID = value

		return []string{
			"ID",
		}
	}
}

func (b OrganisationBuilderFunc) Name(value string) func(*Organisation) []string {
	return func(subject *Organisation) []string {
		subject.Name = value

		return []string{
			"Name",
		}
	}
}

func (b OrganisationBuilderFunc) OptionalString(value null.String) func(*Organisation) []string {
	return func(subject *Organisation) []string {
		subject.OptionalString = value

		return []string{
			"OptionalString",
		}
	}
}

func (b OrganisationBuilderFunc) BoolFlag(value bool) func(*Organisation) []string {
	return func(subject *Organisation) []string {
		subject.BoolFlag = value

		return []string{
			"BoolFlag",
		}
	}
}

// OrganisationMatcher creates a Gomega matcher for Organisation against the given
// fields. Matchers are applied first to last, with subsequent matchers taking precedence.
var OrganisationMatcher = OrganisationMatcherFunc(func(opts ...func(*Organisation, *gstruct.Fields)) types.GomegaMatcher {
	fields := gstruct.Fields{}
	for _, opt := range opts {
		opt(nil, &fields)
	}

	return gstruct.PointTo(
		gstruct.MatchFields(gstruct.IgnoreExtras, fields),
	)
})

// Matcher is added to the base type, permitting other generic functions to build matchers
// from each of the matcher-setter functions.
func (b Organisation) Matcher(opts ...func(*Organisation, *gstruct.Fields)) types.GomegaMatcher {
	return OrganisationMatcher(opts...)
}

type OrganisationMatcherFunc func(opts ...func(*Organisation, *gstruct.Fields)) types.GomegaMatcher

type OrganisationMatcherMatchers struct{}

// Match returns an interface with the same methods as the base matcher, but accepting
// GomegaMatcher parameters instead of the exact equality matches.
func (b OrganisationMatcherFunc) Match() OrganisationMatcherMatchers {
	return OrganisationMatcherMatchers{}
}

func (b OrganisationMatcherFunc) ID(value string) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["ID"] = gomega.Equal(value)
	}
}

func (b OrganisationMatcherFunc) MatchID(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["ID"] = value
	}
}

func (b OrganisationMatcherMatchers) ID(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["ID"] = value
	}
}

func (b OrganisationMatcherFunc) Name(value string) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["Name"] = gomega.Equal(value)
	}
}

func (b OrganisationMatcherFunc) MatchName(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["Name"] = value
	}
}

func (b OrganisationMatcherMatchers) Name(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["Name"] = value
	}
}

func (b OrganisationMatcherFunc) OptionalString(value null.String) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["OptionalString"] = gomega.Equal(value)
	}
}

func (b OrganisationMatcherFunc) MatchOptionalString(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["OptionalString"] = value
	}
}

func (b OrganisationMatcherMatchers) OptionalString(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["OptionalString"] = value
	}
}

func (b OrganisationMatcherFunc) BoolFlag(value bool) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["BoolFlag"] = gomega.Equal(value)
	}
}

func (b OrganisationMatcherFunc) MatchBoolFlag(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["BoolFlag"] = value
	}
}

func (b OrganisationMatcherMatchers) BoolFlag(value types.GomegaMatcher) func(*Organisation, *gstruct.Fields) {
	return func(_ *Organisation, fields *gstruct.Fields) {
		(*fields)["BoolFlag"] = value
	}
}
